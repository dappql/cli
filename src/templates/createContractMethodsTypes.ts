import { writeFileSync } from 'fs'
import { join } from 'path'
import { RUNNING_DIRECTORY } from '../utils/constants'

export function createContractMethodsTypes(
  contracts: string[],
  target: string,
) {
  const path = join(RUNNING_DIRECTORY, target, 'requests.ts')

  const template = `/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ContractMethodNames,
  Params,
} from '@usedapp/core/dist/esm/src/model/types'

import getContract from './getContract'
import { ${contracts.join(', ')} } from './typechain'

${contracts
  .map(
    (c) => `// Contract: ${c}
export type ${c}MethodNames = ContractMethodNames<${c}>
export type ${c}Params = Params<${c}, ${c}MethodNames>

export type ${c}Request = {
  contract: (network?: number) => ${c}
  method: ${c}MethodNames
  args: ${c}Params
  returnType?: Awaited<ReturnType<${c}['functions'][${c}MethodNames]>>[0]
}

export function ${c}Call<M extends ${c}MethodNames>(
  method: M,
  args: Parameters<${c}['functions'][M]>,
) {
  return {
    contract: (network?: number) => getContract('${c}', network),
    method,
    args,
    returnType: undefined as
      | Awaited<ReturnType<${c}['functions'][M]>>[0]
      | undefined,
  }
}
`,
  )
  .join('\n')}
// All Requests
export type Requests = Record<string, ${contracts.join('Request | ')}Request >
`
  writeFileSync(path, template)
}
