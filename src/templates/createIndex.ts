import { writeFileSync } from 'fs'
import { join } from 'path'
import { RUNNING_DIRECTORY } from '../utils/constants'

export function createIndex(contracts: string[], target: string) {
  const path = join(RUNNING_DIRECTORY, target, 'index.tsx')

  const template = `/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
  
import {
  AccountQueryContainerProps,
  MasterAccountQueryContainer,
  MasterQueryContainer,
  QueryContainerProps,
  useMasterMutation,
  useMasterQuery,
} from '@dappql/core'
import { CacheOptions } from '@dappql/cache'
import { QueryParams } from '@usedapp/core'
import { ContractFunctionNames } from '@usedapp/core/dist/esm/src/model'

import { Requests, ${contracts.join('Call, ')}Call } from './requests'
import getContract, { ContractNames, Contracts } from './getContract'

export const call = {
${contracts.map((c) => `  ${c}: ${c}Call`).join(',\n')},
}

export type QueryData<T extends Requests> = {
  [K in keyof T]: NonNullable<T[K]['returnType']>
}

export function useQuery<T extends Requests>(requests: T, queryParams: QueryParams & CacheOptions = {}) {
  return useMasterQuery(requests, queryParams)
}

export function QueryContainer<T extends Requests>(props: QueryContainerProps<Requests, T>) {
  return <MasterQueryContainer {...props} />
}

export function AccountQueryContainer<T extends Requests>(props: AccountQueryContainerProps<Requests, T>) {
  return <MasterAccountQueryContainer {...props} />
}

export function useMutation<T extends ContractNames>(
  contractName: T,
  methodName: ContractFunctionNames<Contracts[T]>,
  transactionName?: string,
) {
  return useMasterMutation(getContract, contractName, methodName, transactionName)
}
export type Mutation = ReturnType<typeof useMutation>

`
  writeFileSync(path, template)
}
