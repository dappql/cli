import { writeFileSync } from 'fs'
import { join } from 'path'
import { RUNNING_DIRECTORY } from '../utils/constants'
import touchDirectory from '../utils/touchDirectory'

export function createHooks(contracts: string[], target: string) {
  const dir = join(RUNNING_DIRECTORY, target, 'hooks')
  touchDirectory(dir)

  contracts.forEach((c) => {
    const path = join(dir, `use${c}.ts`)

    const template = `/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { useMemo } from 'react'

import { useCall,  useDappQL } from '@dappql/core'
import { CacheOptions } from '@dappql/cache'
import {
  CallResult,
  useContractFunction,
  useEthers,
  QueryParams,
} from '@usedapp/core'
import { ContractFunctionNames } from '@usedapp/core/dist/esm/src/model/types'

import getContract from '../getContract'
import { ${c}MethodNames } from '../requests'
import { ${c} } from '../typechain'

export function use${c}Call<M extends ${c}MethodNames>(
  method: M,
  args: Parameters<${c}['functions'][M]>,
  queryParams: QueryParams & CacheOptions = {}
) {
  const { queryParams: finalQueryParams } = useDappQL(queryParams)

  const contract = useMemo(() => getContract('Collections', finalQueryParams.chainId), [finalQueryParams.chainId])
  // @ts-ignore - TODO: hooks will be removed
  const { value, error } = (useCall(
    {
      contract,
      // @ts-ignore - TODO: hooks will be removed
      method,
      // @ts-ignore - TODO: hooks will be removed
      args,
    },
    finalQueryParams,
  ) as CallResult<${c}, M>) ?? {
    value: undefined,
    error: undefined,
  }

  return [value?.[0], error, !value] as [
    Awaited<ReturnType<${c}['functions'][M]>>[0] | undefined,
    Error | undefined,
    boolean,
  ]
}

type ${c}Functions = ContractFunctionNames<${c}>
export function use${c}Function(name: ${c}Functions, transactionName?: string) {
  const { chainId } = useEthers()

  const contract = useMemo(() => getContract('${c}', chainId), [chainId])

  const transaction = useContractFunction(contract, name, {
    transactionName: transactionName || name,
  })
  return transaction
}
`
    writeFileSync(path, template)
  })
}
